pub struct FluidInterpData {
    pub p: usize,
    pub ti_sh: Vec<f64>,
    pub to_sh: Vec<f64>,
    pub ti_sc: Vec<f64>,
    pub to_sc: Vec<f64>,
}

impl FluidInterpData {
    pub fn for_fluid(fluid: &str) -> Option<FluidInterpData> {
        return match fluid {
            "r22" => Some(FluidInterpData {
                p: 1,
                ti_sh: vec![
                    -1., -0.9, -0.8, -0.7, -0.6, -0.5, -0.3, -0.1, 0.1, 0.3, 0.7, 1.2, 1.7, 2.1,
                    2.9, 3.8, 4.9, 6.4, 8.1, 10., 12., 14.2, 17.2, 20.4, 24.2, 28.4, 32.7, 37.9,
                    43.6, 48.5, 48.8,
                ],
                to_sh: vec![
                    -104.3, -78.8, -69.4, -63.1, -58.3, -54.3, -48., -43., -38.8, -35.1, -28.9,
                    -22.6, -17.4, -13.6, -7.2, -1., 5.4, 12.9, 20.1, 27., 33.4, 39.7, 47.2, 54.3,
                    61.8, 69.1, 75.8, 83.1, 90.2, 95.7, 96.1,
                ],
                ti_sc: vec![
                    -1., -0.9, -0.8, -0.7, -0.6, -0.5, -0.3, -0.1, 0.1, 0.3, 0.7, 1.2, 1.7, 2.1,
                    2.9, 3.8, 4.9, 6.4, 8.1, 10., 12., 14.2, 17.2, 20.4, 24.2, 28.4, 32.7, 37.9,
                    43.6, 48.5, 48.8,
                ],
                to_sc: vec![
                    -104.3, -78.8, -69.4, -63.1, -58.3, -54.3, -48., -43., -38.8, -35.1, -28.9,
                    -22.6, -17.4, -13.6, -7.2, -1., 5.4, 12.9, 20.1, 27., 33.4, 39.7, 47.2, 54.3,
                    61.8, 69.1, 75.8, 83.1, 90.2, 95.7, 96.1,
                ],
            }),
            "r134a" => Some(FluidInterpData {
                p: 1,
                ti_sh: vec![
                    -1., -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2, 0., 0.3, 0.7, 1.1, 1.5, 2.1,
                    2.9, 3.7, 4.7, 6.1, 7.5, 8.9, 10.8, 13., 15.6, 18.6, 22., 25.8, 30.3, 34.9,
                    39.3, 39.4, 39.5,
                ],
                to_sh: vec![
                    -91.5, -65.1, -55.4, -48.9, -44., -40., -36.5, -30.8, -26.1, -20.2, -13.9,
                    -8.7, -4.1, 1.7, 8.3, 13.9, 20., 27.3, 33.5, 39.1, 45.7, 52.5, 59.5, 66.6,
                    73.8, 80.9, 88.3, 95., 100.7, 82.8, 101.,
                ],
                ti_sc: vec![
                    -1., -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2, 0., 0.3, 0.7, 1.1, 1.5, 2.1,
                    2.9, 3.7, 4.7, 6.1, 7.5, 8.9, 10.8, 13., 15.6, 18.6, 22., 25.8, 30.3, 34.9,
                    39.3, 39.4, 39.5,
                ],
                to_sc: vec![
                    -91.5, -65.1, -55.4, -48.9, -44., -40., -36.5, -30.8, -26.1, -20.2, -13.9,
                    -8.7, -4.1, 1.7, 8.3, 13.9, 20., 27.3, 33.5, 39.1, 45.7, 52.5, 59.5, 66.6,
                    73.8, 80.9, 88.3, 95., 100.7, 82.8, 101.,
                ],
            }),
            "r404a" => Some(FluidInterpData {
                p: 1,
                ti_sh: vec![
                    -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2, 0., 0.3, 0.7, 1.1, 1.7, 2.5, 3.3,
                    4.2, 5.4, 6.7, 8.1, 9.8, 12., 14.4, 17.1, 20.2, 23.6, 27.8, 32.4, 36.3,
                ],
                to_sh: vec![
                    -82.2, -73.1, -67.1, -62.4, -58.6, -55.3, -49.9, -45.5, -39.9, -33.9, -28.9,
                    -22.6, -15.7, -10., -4.3, 2.1, 8.1, 13.8, 19.9, 26.8, 33.4, 39.9, 46.6, 53.1,
                    60.2, 67., 72.1,
                ],
                ti_sc: vec![
                    -0.9, -0.8, -0.7, -0.6, -0.5, -0.3, -0.1, 0.1, 0.4, 0.8, 1.3, 1.9, 2.5, 3.3,
                    4.4, 5.7, 7., 8.5, 10.6, 13., 15.7, 18.6, 21.5, 25.4, 29.5, 33.6, 36.3,
                ],
                to_sc: vec![
                    -83.2, -74.1, -68., -63.3, -59.4, -53.3, -48.4, -44.2, -39., -33.3, -27.3,
                    -21.4, -16.3, -10.5, -3.7, 3.1, 8.9, 14.9, 22.1, 29.3, 36.3, 42.9, 48.9, 56.,
                    62.6, 68.5, 72.1,
                ],
            }),
            "r407c" => Some(FluidInterpData {
                p: 1,
                ti_sh: vec![
                    -0.8, -0.7, -0.6, -0.5, -0.4, -0.2, 0., 0.3, 0.6, 1., 1.6, 2.2, 3., 3.9, 5.2,
                    6.8, 8.4, 10.2, 12.1, 14.8, 17.4, 20.2, 24.2, 28.3, 33.1, 38.1, 42.7, 45.2,
                    45.3,
                ],
                to_sh: vec![
                    -64.1, -58., -53.4, -49.6, -46.4, -41., -36.6, -31.2, -26.6, -21.5, -15.2,
                    -9.9, -3.9, 1.9, 8.9, 16.1, 22.3, 28.3, 34., 41., 46.9, 52.7, 59.9, 66.4, 73.1,
                    79.2, 84.1, 86.2, 86.2,
                ],
                ti_sc: vec![
                    -0.8, -0.7, -0.6, -0.5, -0.4, -0.2, 0., 0.2, 0.5, 0.9, 1.3, 1.9, 2.5, 3.3, 4.3,
                    5.7, 7.3, 8.9, 10.7, 12.6, 15.1, 17.8, 20.8, 24., 28.2, 33.4, 38.6, 45.2, 45.3,
                ],
                to_sc: vec![
                    -71.5, -65.4, -60.7, -56.8, -53.5, -48.1, -43.6, -39.8, -34.9, -29.5, -24.8,
                    -19., -13.9, -8.2, -2., 5.3, 12.3, 18.4, 24.4, 30.1, 36.7, 43., 49.3, 55.4,
                    62.5, 70.3, 77.3, 85.6, 85.8,
                ],
            }),
            "r410a" => Some(FluidInterpData {
                p: 1,
                ti_sh: vec![
                    -0.9, -0.8, -0.7, -0.6, -0.5, -0.3, -0.1, 0.1, 0.4, 0.7, 1.1, 1.7, 2.3, 2.9,
                    3.8, 4.8, 5.9, 7.7, 9.7, 11.7, 13.9, 16.5, 19.4, 23.1, 27.6, 32.4, 37.6, 42.9,
                    47.9,
                ],
                to_sh: vec![
                    -86.5, -77.8, -72., -67.5, -63.9, -58., -53.4, -49.5, -44.6, -40.4, -35.7,
                    -29.8, -24.9, -20.5, -14.9, -9.6, -4.4, 2.8, 9.6, 15.5, 21.2, 27.2, 33.2, 39.9,
                    47.1, 53.8, 60.3, 66.2, 71.3,
                ],
                ti_sc: vec![
                    -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2, 0., 0.3, 0.7, 1.2, 1.8, 2.5, 3.4,
                    4.4, 5.7, 7.4, 9.3, 11.7, 14.4, 17.3, 20.2, 24.3, 29., 33.4, 38.2, 43.7, 47.9,
                ],
                to_sc: vec![
                    -86.6, -77.9, -72., -67.6, -63.9, -60.8, -55.7, -51.4, -46.2, -40.5, -34.7,
                    -29., -23.4, -17.4, -11.7, -5.4, 1.6, 8.2, 15.4, 22.3, 28.8, 34.6, 41.8, 49.,
                    55., 60.9, 67., 71.2,
                ],
            }),
            "r507a" => Some(FluidInterpData {
                p: 1,
                ti_sh: vec![
                    -1., -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2, 0., 0.3, 0.6, 1., 1.4, 2., 2.8,
                    3.7, 4.8, 6., 7.4, 8.9, 10.7, 12.9, 15.6, 18.4, 21.5, 25.3, 30., 34.7, 36.,
                ],
                to_sh: vec![
                    -108.2, -83.6, -74.5, -68.4, -63.7, -59.9, -56.6, -51.2, -46.7, -41.2, -36.6,
                    -31.4, -26.9, -21.1, -14.7, -8.6, -2.2, 3.8, 9.8, 15.6, 21.6, 28.2, 35.2, 41.6,
                    48., 54.9, 62.4, 68.9, 70.6,
                ],
                ti_sc: vec![
                    -1., -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2, 0., 0.3, 0.6, 1., 1.4, 2., 2.8,
                    3.7, 4.8, 6.2, 7.8, 9.4, 11.6, 14.1, 17.1, 19.9, 23.5, 27.7, 32.4, 36.,
                ],
                to_sc: vec![
                    -108.3, -83.6, -74.5, -68.4, -63.7, -59.9, -56.6, -51.2, -46.7, -41.2, -36.6,
                    -31.4, -26.9, -21.1, -14.7, -8.6, -2.2, 4.7, 11.4, 17.3, 24.4, 31.4, 38.7,
                    44.7, 51.7, 58.8, 65.8, 70.6,
                ],
            }),
            "r717" => Some(FluidInterpData {
                p: 1,
                ti_sh: vec![
                    -0.9, -0.8, -0.7, -0.6, -0.5, -0.3, -0.1, 0.1, 0.4, 0.7, 1., 1.5, 2.1, 2.8,
                    3.9, 5., 6.4, 7.8, 9.8, 11.9, 14.4, 17.2, 20.7, 25.3, 30.1, 35.2, 40.6, 46.4,
                    52.9, 61.6, 71.5, 82.1, 93.4, 106.1, 112.3,
                ],
                to_sh: vec![
                    -69.5, -60.4, -54.4, -49.8, -46., -40.1, -35.4, -31.4, -26.5, -22.3, -18.7,
                    -13.5, -8.3, -3.1, 3.7, 9.4, 15.5, 20.9, 27.5, 33.5, 39.7, 45.8, 52.6, 60.3,
                    67.3, 73.9, 80.2, 86.3, 92.6, 100.1, 107.7, 115., 122., 129.1, 132.2,
                ],
                ti_sc: vec![
                    -0.9, -0.8, -0.7, -0.6, -0.5, -0.3, -0.1, 0.1, 0.4, 0.7, 1., 1.5, 2.1, 2.8,
                    3.9, 5., 6.4, 7.8, 9.8, 11.9, 14.4, 17.2, 20.7, 25.3, 30.1, 35.2, 40.6, 46.4,
                    52.9, 61.6, 71.5, 82.1, 93.4, 106.1, 112.3,
                ],
                to_sc: vec![
                    -69.5, -60.4, -54.4, -49.8, -46., -40.1, -35.4, -31.4, -26.5, -22.3, -18.7,
                    -13.5, -8.3, -3.1, 3.7, 9.4, 15.5, 20.9, 27.5, 33.5, 39.7, 45.8, 52.6, 60.3,
                    67.3, 73.9, 80.2, 86.3, 92.6, 100.1, 107.7, 115., 122., 129.1, 132.2,
                ],
            }),
            "idealEcoSafe" => Some(FluidInterpData {
                p: 1,
                ti_sh: vec![
                    -0.5, 0., 0.6, 1.2, 1.8, 2.4, 3.2, 4.1, 5., 6.1, 7.5, 9.4, 12.3, 15.7, 18.3,
                    20.5, 24.4, 25.7, 26.8,
                ],
                to_sh: vec![
                    -40.2, -32.7, -24.7, -17.7, -11.5, -6.1, 0.1, 6., 10.9, 16., 21.4, 27.5, 35.9,
                    44.9, 50.9, 55.3, 62.1, 64.9, 68.1,
                ],
                ti_sc: vec![
                    -0.5, 0., 0.6, 1.2, 1.8, 2.4, 3.2, 4.1, 5., 6.1, 7.5, 9.4, 12.3, 15.7, 18.3,
                    20.5, 24.4, 25.7, 26.8,
                ],
                to_sc: vec![
                    -40.2, -32.7, -24.7, -17.7, -11.5, -6.1, 0.1, 6., 10.9, 16., 21.4, 27.5, 35.9,
                    44.9, 50.9, 55.3, 62.1, 64.9, 68.1,
                ],
            }),
            _ => None,
        };
    }

    pub fn vec_interp_sh(self: &mut FluidInterpData, input: f64) -> Option<f64> {
        let length = self.ti_sh.len();
        // let mut p = (length / 2);
        while (self.p >= 1) && (self.p < length) {
            if input > self.ti_sh[self.p] {
                self.p += 1;
                // if (self.p >= length) { self.p = self.p - 1; return None; }
            } else if input < self.ti_sh[self.p - 1] {
                self.p -= 1;
                // if (self.p < 1) { self.p = self.p + 1; return None; }
            } else if input >= self.ti_sh[self.p - 1] && input <= self.ti_sh[self.p] {
                return Some(
                    ((input - self.ti_sh[self.p - 1])
                        / (self.ti_sh[self.p] - self.ti_sh[self.p - 1]))
                        * (self.to_sh[self.p] - self.to_sh[self.p - 1])
                        + self.to_sh[self.p - 1],
                );
            } else {
                return None;
            }
        }
        return None;
    }

    pub fn vec_interp_sc(self: &mut FluidInterpData, input: f64) -> Option<f64> {
        let length = self.ti_sc.len();
        // let mut p = (length / 2);
        while (self.p >= 1) && (self.p < length) {
            if input > self.ti_sc[self.p] {
                self.p += 1;
                // if (self.p >= length) { self.p = self.p - 1; return None; }
            } else if input < self.ti_sc[self.p - 1] {
                self.p -= 1;
                // if (self.p < 1) { self.p = self.p + 1; return None; }
            } else if input >= self.ti_sc[self.p - 1] && input <= self.ti_sc[self.p] {
                return Some(
                    ((input - self.ti_sc[self.p - 1])
                        / (self.ti_sc[self.p] - self.ti_sc[self.p - 1]))
                        * (self.to_sc[self.p] - self.to_sc[self.p - 1])
                        + self.to_sc[self.p - 1],
                );
            } else {
                return None;
            }
        }
        return None;
    }
}

pub fn calculateSubResf(
    viData: &mut FluidInterpData,
    Pliq: &Option<f64>,
    Tliq: &Option<f64>,
    Lcmp: &Option<bool>,
) -> Option<f64> {
    if Lcmp.is_none() || (*Lcmp != Some(true)) {
        return None;
    }
    if (Pliq.is_none()) || (Tliq.is_none()) {
        return None;
    }
    let Tc = viData.vec_interp_sc(Pliq.unwrap());
    if (Tc.is_none()) {
        return None;
    }
    return Some(((Tc.unwrap() - Tliq.unwrap()) * 10.0).round() / 10.0);
}

pub fn calculateSupAq(
    viData: &mut FluidInterpData,
    Psuc: &Option<f64>,
    Tsuc: &Option<f64>,
    Lcmp: &Option<bool>,
) -> Option<f64> {
    if Lcmp.is_none() || (*Lcmp != Some(true)) {
        return None;
    }
    if (Psuc.is_none()) || (Tsuc.is_none()) {
        return None;
    }
    let Te = viData.vec_interp_sh(Psuc.unwrap());
    if (Te.is_none()) {
        return None;
    }
    return Some(((Tsuc.unwrap() - Te.unwrap()) * 10.0).round() / 10.0);
}
